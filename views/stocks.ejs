<div class="container d-flex flex-column align-items-center">
    <h1 class="mt-4">Stocks</h1>

    <div class="container d-flex align-items-center justify-content-center gap-5 mt-4">
        <div class="container border text-center">
            <h2>available</h2>
            <div id="available_container" class="d-flex flex-column align-items-center gap-5">

            </div>
        </div>
        <div class="container border text-center">
            <h2>unavailable</h2>
            <div id="unavailable_container" class="d-flex flex-column align-items-center">

            </div>
        </div>
    </div>
</div>

<script>
    init();

    async function init() {
        try {
            const { availableInitState, unavailableInitState } = await getInitState();
            let avState = availableInitState;
            let unavState = unavailableInitState;

            renderLists(avState, unavState);

            attachEventListeners(toggle);

            function toggle(e) {
                let currentItem = null;
                let isAv = false;
                for (let i = 0; i < avState.length; i++) {
                    if (avState[i].id == e.target.id) {
                        currentItem = avState[i];
                        isAv = true;
                        break;
                    }
                }
                for (let i = 0; i < unavState.length; i++) {
                    if (unavState[i].id == e.target.id) {
                        currentItem = unavState[i];
                        break;
                    }
                }

                if (isAv) {
                    dettachEventListeners(toggle);
                    avState = avState.filter(x => x.id != e.target.id);
                    unavState = [...unavState, { ...currentItem }];
                    renderLists(avState, unavState);
                    attachEventListeners(toggle);
                } else {
                    dettachEventListeners(toggle);
                    unavState = unavState.filter(x => x.id != e.target.id);
                    avState = [...avState, { ...currentItem }];
                    renderLists(avState, unavState);
                    attachEventListeners(toggle);
                }
            }

        } catch (err) {
            window.location.replace("http://localhost:6161/error")
        }
    }

    // dettach event listeners
    function dettachEventListeners(callback){
        document.querySelectorAll('.toggle_btn').forEach(x => x.removeEventListener('click', callback));
    }
    // attach event listeners
    function attachEventListeners(callback) {
        document.querySelectorAll('.toggle_btn').forEach(x => x.addEventListener('click', callback));
    }
    // handle toggle
    function toggleHandler(e, available, unavailable) {
        console.log(e.currentTarget);
        console.log(available);
        console.log(unavailable);
    }
    // render lists
    function renderLists(available, unavailable) {
        renderAvailable(available);
        renderUnavailable(unavailable);
    }
    // render available
    function renderAvailable(available) {
        const container = document.querySelector('#available_container');
        const ul = document.createElement('ul');
        available.forEach(el => {
            ul.appendChild(createLiElement(el));
        });
        container.replaceChildren(ul);
    }
    // render unavailable
    function renderUnavailable(unavailable) {
        const container = document.querySelector('#unavailable_container');
        const div = document.createElement('div');
        unavailable.forEach(el => {
            div.appendChild(createLiElement(el));
        })
        container.replaceChildren(div);
    }
    // createLiElement
    function createLiElement(laptop) {
        const el = document.createElement('div');
        const elClasses = ['d-flex', 'gap-2', 'mt-1'];
        elClasses.forEach(x => el.classList.add(x));
        const btn = document.createElement('button');
        btn.classList.add('toggle_btn')
        btn.textContent = 'toggle';
        btn.id = laptop.id;
        el.textContent = laptop.title;
        el.appendChild(btn);
        return el;
    }
    // get init state
    async function getInitState() {
        const res = await fetch('http://localhost:6161/api/stocksdata');
        const data = await res.json();
        const availableInitState = data.available;
        const unavailableInitState = data.unavailable;
        return { availableInitState, unavailableInitState }
    }
</script>