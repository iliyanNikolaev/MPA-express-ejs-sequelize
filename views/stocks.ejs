<div class="container d-flex flex-column align-items-center">
    <h1 class="mt-4">Stocks</h1>

    <div class="container d-flex align-items-center justify-content-center gap-5 mt-4">
        <div class="container border text-center">
            <h2>available</h2>
            <div id="available_container" class="d-flex flex-column align-items-center gap-5">

            </div>
        </div>
        <div class="container border text-center">
            <h2>unavailable</h2>
            <div id="unavailable_container" class="d-flex flex-column align-items-center">

            </div>
        </div>
    </div>
</div>

<script>
    init();

    async function init() {
        try {
            const { availableInitState, unavailableInitState } = await getInitState();
            const avState = new State(availableInitState);
            const unavState = new State(unavailableInitState);

            renderLists(avState.getState(), unavState.getState());

            document.querySelectorAll('.toggle_btn').forEach(x => x.addEventListener('click', toggle));

            function toggle(e) {
                console.log('trigger');
                // const itemId = e.target.id;
                // avState.getState().forEach(x => {
                //     if (x.id == itemId) {
                //         const prevAvState = avState.getState();
                //         const newAvState = prevAvState.filter(x => x.id != itemId);

                //         const prevUnavState = unavState.getState();
                //         const newUnavState = [...prevUnavState, {...x}];

                //         renderLists(newAvState, newUnavState);
                //     }
                // })
                // unavState.getState().forEach(x => {
                //     if (x.id == itemId) {
                //         const prevUnavState = unavState.getState();
                //         const newUnavState = prevUnavState.filter(x => x.id != itemId);

                //         const prevAvState = avState.getState();
                //         const newAvState = [...prevAvState, {...x}];

                //         renderLists(newAvState, newUnavState);
                //     }
                // })
            }

        } catch (err) {
            console.log(err);
            // window.location.replace("http://localhost:6161/error")
        }
    }

    // add listeners to btns
    function addToggleListeners(callback) {
        
    }
    // handle toggle
    function toggleHandler(e) {
        console.log(e.currentTarget);
    }
    // render lists
    function renderLists(available, unavailable) {
        renderAvailable(available);
        renderUnavailable(unavailable);
    }
    // render available
    function renderAvailable(available) {
        const container = document.querySelector('#available_container');
        const ul = document.createElement('ul');
        available.forEach(el => {
            ul.appendChild(createLiElement(el));
        });
        container.replaceChildren(ul);
    }
    // render unavailable
    function renderUnavailable(unavailable) {
        const container = document.querySelector('#unavailable_container');
        const div = document.createElement('div');
        unavailable.forEach(el => {
            div.appendChild(createLiElement(el));
        })
        container.replaceChildren(div);
    }
    // createLiElement
    function createLiElement(laptop) {
        const el = document.createElement('div');
        const elClasses = ['d-flex', 'gap-2', 'mt-1'];
        elClasses.forEach(x => el.classList.add(x));
        const btn = document.createElement('button');
        btn.classList.add('toggle_btn')
        btn.textContent = 'toggle';
        btn.id = laptop.id;
        el.textContent = laptop.title;
        el.appendChild(btn);
        return el;
    }
    // get init state
    async function getInitState() {
        const res = await fetch('http://localhost:6161/api/stocksdata');
        const data = await res.json();
        const availableInitState = data.available;
        const unavailableInitState = data.unavailable;
        return { availableInitState, unavailableInitState }
    }
    // State class
    class State {
        state = null;

        constructor(initState) {
            this.state = initState;
        }

        getState() {
            return this.state;
        }

        setState(newState) {
            this.state = newState;
        }
    }
</script>