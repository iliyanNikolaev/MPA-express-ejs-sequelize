<div class="container d-flex flex-column align-items-center">
    <h1 class="mt-4">Stocks</h1>

    <div class="container d-flex align-items-center justify-content-center gap-5 mt-4">
        <div class="container border text-center">
            <h2>available</h2>
            <div id="available_container">

            </div>
        </div>
        <div class="container border text-center">
            <h2>unavailable</h2>
            <div id="unavailable_container">

            </div>
        </div>
    </div>
</div>

<script>
    init();

    async function init() {
        try {
            const { availableInitState, unavailableInitState } = await getInitState();
            const avState = new State(availableInitState);
            const unavState = new State(unavailableInitState);

            renderAvailable(avState.getState());
            renderUnavailable(unavState.getState());
        } catch (err) {
            console.log(err);
            // window.location.replace("http://localhost:6161/error")
        }
    }

    // render available
    function renderAvailable(available) {
        const container = document.querySelector('#available_container');
        const ul = document.createElement('ul');
        available.forEach(el => {
            ul.appendChild(createLiElement(el));
        });
        container.appendChild(ul);
    }
    // render unavailable
    function renderUnavailable(unavailable) {
        const container = document.querySelector('#unavailable_container');
        const ul = document.createElement('ul');
        unavailable.forEach(el => {
            ul.appendChild(createLiElement(el));
        })
        container.appendChild(ul);
    }
    // createLiElement
    function createLiElement(li) {
        const el = document.createElement('li');
        el.id = li.id;
        el.textContent = li.title;
        return el;
    }
    // get init state
    async function getInitState() {
        const res = await fetch('http://localhost:6161/api/stocksdata');
        const data = await res.json();
        const availableInitState = data.available;
        const unavailableInitState = data.unavailable;
        return { availableInitState, unavailableInitState }
    }
    // State class
    class State {
        state = null;
        subscribers = [];

        constructor(initState) {
            this.state = initState;
        }

        getState() {
            return this.state;
        }

        setState(newState) {
            this.state = newState;
            subscribers.forEach(subscriber => subscriber());
        }

        subscribe(callback) {
            subscribers.push(callback);
        }
    }
</script>